{"version":3,"sources":["components/Main/Search/_redux/searchTypes.ts","components/Main/_redux/mainTypes.ts","config/airportsConfig.ts","components/Main/_redux/mainReducers.ts","components/Main/Search/_redux/searchReducers.ts","components/Main/_redux/mainSagas.ts","redux/rootSaga.ts","redux/store.ts","routes/index.tsx","components/_App/App.tsx","serviceWorker.ts","index.tsx","utils/helpers.ts"],"names":["SET_SEARCH","GET_AIRPORTS","GET_AIRPORTS_SUCCESS","GET_AIRPORTS_FAIL","GET_ROUTES","GET_ROUTES_SUCCESS","GET_ROUTES_FAIL","AIRPORTS_ENTRIES","0","1","2","3","4","5","6","7","8","9","10","11","12","13","ROUTES_ENTRIES","initialState","airportsList","routesList","_pending","_loaded","_error","mainReducer","state","action","type","getEntriesFromDatFile","payload","searchResults","searchReducer","getAirportsSaga","getRoutesSaga","mainSaga","callback","call","Axios","get","data","put","takeLeading","rootSaga","all","rootReducer","combineReducers","main","search","sagaMiddleware","createSagaMiddleware","middleware","enhancer","composeWithDevTools","applyMiddleware","store","createStore","persistStore","run","MainComponent","lazy","loaderStyles","backgroundColor","Routes","fallback","Dimmer","active","inverted","style","Loader","component","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","areEqual","oldProps","newProps","equals","config","split","map","row","reduce","acc","curr","index","replace"],"mappings":"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","file":"static/js/main.a91a1f74.chunk.js","sourcesContent":["export const SET_SEARCH = '[@@Search] SET_SEARCH';\nexport const SET_SEARCH_SUCCESS = '[@@Search] SET_SEARCH_SUCCESS';\nexport const SET_SEARCH_FAIL = '[@@Search] SET_SEARCH_FAIL';\n\nexport interface ISetSearchAction {\n  type: typeof SET_SEARCH;\n  payload: any;\n}\n\nexport type searchTypes = ISetSearchAction;\n","import { AxiosError } from 'axios';\n\n// GET_AIRPORTS\nexport const GET_AIRPORTS = '[@@Map] GET_AIRPORTS';\nexport const GET_AIRPORTS_SUCCESS = '[@@Map] GET_AIRPORTS_SUCCESS';\nexport const GET_AIRPORTS_FAIL = '[@@Map] GET_AIRPORTS_FAIL';\n\nexport interface IGetAirportsAction {\n  type: typeof GET_AIRPORTS;\n  payload: any;\n}\n\nexport interface IGetAirportsSuccessAction {\n  type: typeof GET_AIRPORTS_SUCCESS;\n  payload: any;\n}\n\nexport interface IGetAirportsFailAction {\n  type: typeof GET_AIRPORTS_FAIL;\n  payload: AxiosError;\n}\n\n// GET_ROUTES\nexport const GET_ROUTES = '[@@Map] GET_ROUTES';\nexport const GET_ROUTES_SUCCESS = '[@@Map] GET_ROUTES_SUCCESS';\nexport const GET_ROUTES_FAIL = '[@@Map] GET_ROUTES_FAIL';\n\nexport interface IGetRoutesAction {\n  type: typeof GET_ROUTES;\n  payload: any;\n}\n\nexport interface IGetRoutesSuccessAction {\n  type: typeof GET_ROUTES_SUCCESS;\n  payload: any;\n}\n\nexport interface IGetRoutesFailAction {\n  type: typeof GET_ROUTES_FAIL;\n  payload: AxiosError;\n}\n\nexport type mainTypes =\n  | IGetRoutesAction\n  | IGetRoutesSuccessAction\n  | IGetRoutesFailAction\n  | IGetAirportsAction\n  | IGetAirportsSuccessAction\n  | IGetAirportsFailAction;\n","import { IEntryConfig } from '../utils/models';\n\nexport const AIRPORTS_ENTRIES: IEntryConfig = {\n  0: 'id', //\tUnique OpenFlights identifier for this airport.\n  1: 'name', //Name of airport. May or may not contain the City name.\n  2: 'city', //\tMain city served by airport. May be spelled differently from Name.\n  3: 'country', //\tCountry or territory where airport is located. See Countries to cross-reference to ISO 3166-1 codes.\n  4: 'iata', //\t3-letter IATA code. Null if not assigned/unknown.\n  5: 'icao', //\t4-letter ICAO code. Null if not assigned.\n  6: 'lat', //\tDecimal degrees, usually to six significant digits. Negative is South, positive is North.\n  7: 'lng', //\tDecimal degrees, usually to six significant digits. Negative is West, positive is East.\n  8: 'altitude', //\tIn feet.\n  9: 'timezone', //\tHours offset from UTC. Fractional hours are expressed as decimals, eg. India is 5.5.\n  10: 'dst', //\tDaylight savings time. One of E (Europe), A (US/Canada), S (South America), O (Australia), Z (New Zealand), N (None) or U (Unknown). See also: Help: Time\n  11: 'tz', // Tz database time zone\tTimezone in \"tz\" (Olson) format, eg. \"America/Los_Angeles\".\n  12: 'type', //\tType of the airport. Value \"airport\" for air terminals, \"station\" for train stations, \"port\" for ferry terminals and \"unknown\" if not known. In airports.csv, only type=airport is included.\n  13: 'source', //\tSource of this data. \"OurAirports\" for data sourced from OurAirports, \"Legacy\" for old data not matched to OurAirports (mostly DAFIF), \"User\" for unverified user contributions. In airports.csv, only source=OurAirports is included.\n};\n\nexport const ROUTES_ENTRIES: IEntryConfig = {\n  0: 'airline', // 2-letter (IATA) or 3-letter (ICAO) code of the airline.\n  1: 'airlineId', // Unique OpenFlights identifier for airline (see Airline).\n  2: 'sourceAirport', //\t3-letter (IATA) or 4-letter (ICAO) code of the source airport.\n  3: 'sourceAirportId', //\tUnique OpenFlights identifier for source airport (see Airport)\n  4: 'destinationAirport', //\t3-letter (IATA) or 4-letter (ICAO) code of the destination airport.\n  5: 'destinationAirportId', //\tUnique OpenFlights identifier for destination airport (see Airport)\n  6: 'codeShare', //\t\"Y\" if this flight is a codeshare (that is, not operated by Airline, but another carrier), empty otherwise.\n  7: 'stops', //\tNumber of stops on this flight (\"0\" for direct)\n  8: 'equipment', //\t3-letter codes for plane type(s) generally used on this flight, separated by spaces\n};\n","import { IWithLoaded, IWithPending, IWithError } from '../../../utils/models';\nimport {\n  AIRPORTS_ENTRIES,\n  ROUTES_ENTRIES,\n} from '../../../config/airportsConfig';\nimport { getEntriesFromDatFile } from '../../../utils/helpers';\nimport { IAirport, IRoute } from '../_models/airportModel';\nimport {\n  mainTypes,\n  GET_AIRPORTS,\n  GET_AIRPORTS_SUCCESS,\n  GET_AIRPORTS_FAIL,\n  GET_ROUTES,\n  GET_ROUTES_SUCCESS,\n  GET_ROUTES_FAIL,\n} from './mainTypes';\n\nexport interface IMainReducer extends IWithLoaded, IWithPending, IWithError {\n  airportsList: IAirport[];\n  routesList: IRoute[];\n}\n\nconst initialState: IMainReducer = {\n  airportsList: [],\n  routesList: [],\n  _pending: false,\n  _loaded: false,\n  _error: null,\n};\n\nconst mainReducer = (state = initialState, action: mainTypes) => {\n  switch (action.type) {\n    // GET_AIRPORTS\n    case GET_AIRPORTS:\n      return { ...state, _pending: true, _loaded: false };\n\n    case GET_AIRPORTS_SUCCESS: {\n      const airportsList = getEntriesFromDatFile(\n        action.payload,\n        AIRPORTS_ENTRIES,\n      );\n      return {\n        ...state,\n        airportsList,\n        _pending: false,\n        _loaded: true,\n      };\n    }\n\n    case GET_AIRPORTS_FAIL:\n      return { ...state, _loaded: false, _pending: false };\n\n    // GET_ROUTES\n    case GET_ROUTES:\n      return { ...state, _pending: true, _loaded: false };\n\n    case GET_ROUTES_SUCCESS: {\n      const routesList = getEntriesFromDatFile(action.payload, ROUTES_ENTRIES);\n      return {\n        ...state,\n        routesList,\n        _pending: false,\n        _loaded: true,\n      };\n    }\n\n    case GET_ROUTES_FAIL: {\n      return { ...state, _loaded: false, _pending: false };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default mainReducer;\n","import {\n  IWithLoaded,\n  IWithPending,\n  IWithError,\n} from '../../../../utils/models';\nimport { searchTypes, SET_SEARCH } from './searchTypes';\n\nexport interface ISearchReducer extends IWithLoaded, IWithPending, IWithError {\n  searchResults: any[];\n}\n\nconst initialState: ISearchReducer = {\n  searchResults: [],\n  _pending: false,\n  _loaded: false,\n  _error: null,\n};\n\nconst searchReducer = (state = initialState, action: searchTypes) => {\n  switch (action.type) {\n    case SET_SEARCH:\n      return { ...state, searchResults: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;\n","import Axios from 'axios';\nimport { call, takeLeading, put } from 'redux-saga/effects';\n\nimport {\n  GET_AIRPORTS,\n  GET_AIRPORTS_SUCCESS,\n  GET_AIRPORTS_FAIL,\n  GET_ROUTES,\n  GET_ROUTES_SUCCESS,\n  GET_ROUTES_FAIL,\n} from './mainTypes';\nimport { getAirportsAction, getRoutesAction } from './mainActions';\n\nconst airportsUrl =\n  'https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat';\nconst routesUrl =\n  'https://raw.githubusercontent.com/jpatokal/openflights/master/data/routes.dat';\n\nfunction* getAirportsSaga({ callback }: ReturnType<typeof getAirportsAction>) {\n  try {\n    const { data } = yield call(() => Axios.get(airportsUrl));\n    yield put({ type: GET_AIRPORTS_SUCCESS, payload: data });\n    if (callback) callback();\n  } catch (error) {\n    yield put({ type: GET_AIRPORTS_FAIL, payload: error });\n  }\n}\n\nfunction* getRoutesSaga({ callback }: ReturnType<typeof getRoutesAction>) {\n  try {\n    const { data } = yield call(() => Axios.get(routesUrl));\n    yield put({ type: GET_ROUTES_SUCCESS, payload: data });\n    if (callback) callback();\n  } catch (error) {\n    yield put({ type: GET_ROUTES_FAIL, payload: error });\n  }\n}\n\nexport default function* mainSaga() {\n  yield takeLeading(GET_AIRPORTS, getAirportsSaga);\n  yield takeLeading(GET_ROUTES, getRoutesSaga);\n}\n","import { all } from 'redux-saga/effects';\n\nimport mainSaga from '../components/Main/_redux/mainSagas';\n\nexport default function* rootSaga() {\n  yield all([mainSaga()]);\n}\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore } from 'redux-persist';\nimport createSagaMiddleware, { SagaMiddleware } from 'redux-saga';\n\nimport mainReducer from '../components/Main/_redux/mainReducers';\nimport searchReducer from '../components/Main/Search/_redux/searchReducers';\nimport rootSaga from './rootSaga';\n\nconst rootReducer = combineReducers({\n  main: mainReducer,\n  search: searchReducer,\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware: SagaMiddleware[] = [sagaMiddleware];\nconst enhancer = composeWithDevTools(applyMiddleware(...middleware));\n\nexport const store: any = createStore(rootReducer, enhancer);\nexport const persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\n","import React, { Suspense, lazy } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Loader, Dimmer } from 'semantic-ui-react';\n\nconst MainComponent = lazy(() => import('../components/Main/Main'));\n\nconst loaderStyles = {\n  backgroundColor: '#d8e7ea',\n};\n\nconst Routes = () => {\n  return (\n    <Suspense\n      fallback={\n        <Dimmer active inverted style={loaderStyles}>\n          <Loader inverted>Loading</Loader>\n        </Dimmer>\n      }\n    >\n      <Switch>\n        <Route component={MainComponent} path=\"/\" />\n      </Switch>\n    </Suspense>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport Routes from '../../routes';\nimport './App.scss';\n\nconst App = () => {\n  return <Routes />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { store } from './redux/store';\nimport App from './components/_App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { equals } from 'ramda';\nimport { IEntryConfig } from './models';\n\nexport const areEqual = (oldProps: any, newProps: any): boolean =>\n  equals(oldProps, newProps);\n\nexport const getEntriesFromDatFile = (data: string, config: IEntryConfig) => {\n  return data.split(/\\n/).map((row: string) => {\n    const rowEntity = row.split(',');\n    return rowEntity.reduce((acc: any, curr: string, index) => {\n      acc[config[index]] = curr.replace(/\"/g, '');\n      return acc;\n    }, {});\n  });\n};\n"],"sourceRoot":""}